#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
    echo ""
    echo "Usage:    ./corona [-h]"
    echo "          ./corona [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo ""
    echo "Help:"
    echo ""
    echo "  -h              prints help"
    echo ""
    echo "FILTERS:"
    echo ""
    echo "  -a DATETIME     after: prints records only AFTER the datetime (including the datetime)"
    echo "                  DATETIME format is YYYY-MM-DD"
    echo ""
    echo "  -b DATETIME     before: prints records only BEFORE the datetime (including the datetime)"
    echo "                  DATETIME format is YYYY-MM-DD"
    echo ""
    echo "  -g GENDER       prints records only of the specified gender"
    echo "                  GENDER can be: M - men"
    echo "                                 Z - women"
    echo ""
    echo "  -s [WIDTH]      together with commands 'gender', 'age'. 'daily', 'monthly', 'yearly', 'countries', 'districts' and 'regions' prints records not numerically, but graphically as histogram"
    echo "                  optional parameter WIDTH sets width of histograms - length of the longest row, to WIDTH"
    echo "                  WIDTH must be positive integer"
    echo "                  if WIDTH not specified, it is set automatically"
    echo ""
    echo "COMMANDS:"
    echo ""
    echo "  infected        counts infected"
    echo ""
    echo "  merge           merges several log files into one"
    echo ""
    echo "  gender          prints number of infected for each gender"
    echo ""
    echo "  age             prints statistics on the number of infected people by age"
    echo ""
    echo "  daily           prints statistics on the number of infected people for individual day"
    echo ""
    echo "  monthly         prints statistics on the number of infected people for individual months"
    echo ""
    echo "  yearly          prints statistics on the number of infected people for individual years"
    echo ""
    echo "  countries       prints statistics on the number of infected people for individual countries of infection (excluding CZ)"
    echo ""
    echo "  districts       prints statistics on the number of infected people for individual districts"
    echo ""
    echo "  regions         prints statistics on the number of infected people for individual regions"
    echo ""
}



# commands
CMD_INFECTED=false
CMD_GENDER=false
CMD_AGE=false
CMD_DAILY=false
CMD_MONTHLY=false
CMD_YEARLY=false
CMD_COUNTRIES=false
CMD_DISTRICTS=false
CMD_REGIONS=false
CMD_MERGE=false

# filters
AFTER=false
BEFORE=false
GENDER=false
HISTO=false

# vars
GENDER_TYPE=""
AFTER_DATE=""
BEFORE_DATE=""
WIDTH=0


# files
HEAD="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
FILES=""
FILTRED=""
CMDED=""
OUTPUT=""


switch_cmd()
{
    if $CMD_INFECTED
    then
        CMDED=$( echo "$1" | awk 'BEGIN{count=0} {count++;} END{print count}' )
    
    elif $CMD_GENDER
    then
        CMDED=$( echo "$1" | \
        awk -F, \
        'BEGIN{M=0; Z=0; None=0}
        {
            if ($4 == "M")
                M++;
            else if ($4 == "Z")
                Z++;
            else
                None++;
        }
        END {
            print "M: " M;
            print "Z: " Z;
            if (None>0)
                print "None: " O;
        }
        '
        )

    elif $CMD_AGE
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if ($3 >= 0 && $3 <= 5)
                age["0-5"]++;
            else if ($3 >= 6 && $3 <= 15)
                age["6-15"]++;
            else if ($3 >= 16 && $3 <= 25)
                age["16-25"]++;
            else if ($3 >= 26 && $3 <= 35)
                age["26-35"]++;
            else if ($3 >= 36 && $3 <= 45)
                age["36-45"]++;
            else if ($3 >= 46 && $3 <= 55)
                age["46-55"]++;
            else if ($3 >= 56 && $3 <= 65)
                age["56-65"]++;
            else if ($3 >= 66 && $3 <= 75)
                age["66-75"]++;
            else if ($3 >= 76 && $3 <= 85)
                age["76-85"]++;
            else if ($3 >= 86 && $3 <= 95)
                age["86-95"]++;
            else if ($3 >= 96 && $3 <= 105)
                age["96-105"]++;
            else if ($3 > 105)
                age[">105"]++;
            else
                age["None"]++;
        }
        END {
            print "0-5   : " age["0-5"];
            print "6-15  : " age["6-15"];
            print "16-25 : " age["16-25"];
            print "26-35 : " age["26-35"];
            print "36-45 : " age["36-45"];
            print "46-55 : " age["46-55"];
            print "56-65 : " age["56-65"];
            print "66-75 : " age["66-75"];
            print "76-85 : " age["76-85"];
            print "86-95 : " age["86-95"];
            print "96-105: " age["96-105"];
            print ">105  : " age[">105"];
            if (age["None"] > 0) print "None  : " age["None"];
        }'
        )

    elif $CMD_DAILY
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if ($2 == "")
                days["None"]++;
            else
                days[$2]++;
        }
        END {
            for (day in days)
                print day ": " days[day];
        }' | sort )
    
    elif $CMD_MONTHLY
    then
        CMDED=$( echo "$1" | awk -F, \
        '{ 
            if (substr($2,1,7) == "") 
                months["None"]++;
            else
                months[substr($2,1,7)]++;
        }
        END {
            for (month in months)
                print month ": " months[month];
        }' | sort )
    
    elif $CMD_YEARLY
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if (substr($2,1,4) == "")
                years["None"]++;
            else
                years[substr($2,1,4)]++;
        }
        END {
            for (year in years)
            {
                    print year ": " years[year];
            }
        }' | sort )
    
    elif $CMD_COUNTRIES
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if ($8 != "" && $8 != "CZ")
                countries[$8]++;
        } 
        END {
            for (country in countries)
                print country ": " countries[country];
        }' | sort )
    
    elif $CMD_DISTRICTS
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if ($6 == "")
                districts["None"]++;
            else
                districts[$6]++;
        } 
        END {
            for (district in districts)
                print district ": " districts[district];
        }' | sort )
        

    elif $CMD_REGIONS
    then
        CMDED=$( echo "$1" | awk -F, \
        '{
            if ($5 == "")
                regions["None"]++;
            else
                regions[$5]++;
        } 
        END {
            for (region in regions)
                print region ": " regions[region];
        }' | sort )
    
    else
        CMDED=$( echo "$HEAD" )
        if [ "$1" != "" ]
        then
            CMDED+="\n"
            CMDED+="$1"
        fi
    fi

    echo "$CMDED"
}


# gets filters
while [ "$#" -gt 0 ]; do

    case "$1" in
        -h)
            print_help
            exit 0
            ;;
        -a)
            AFTER=true
            AFTER_DATE=$2
            if ! [[ "$AFTER_DATE" =~ ((18|19|20)[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((18|19|20)[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))|((18|19|20)[0-9]{2}-(02)-(0[1-9]|1[0-9]|2[0-8]))|((((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)-(02)-29) ]]
            then
                >&2 echo "ERROR: -a filter needs valid date"
                exit 1
            fi
            shift
            shift
            ;;
        -b)
            BEFORE=true
            BEFORE_DATE=$2
            if ! [[ "$BEFORE_DATE" =~ ((18|19|20)[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((18|19|20)[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))|((18|19|20)[0-9]{2}-(02)-(0[1-9]|1[0-9]|2[0-8]))|((((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)-(02)-29) ]]
            then
                >&2 echo "ERROR: -b filter needs valid date"
                exit 1
            fi
            shift
            shift
            ;;
        -g)
            GENDER=true
            GENDER_TYPE=$2
            if [[ "$GENDER_TYPE" == "M" ]] || [[ "$GENDER_TYPE" == "Z" ]]
            then
                shift
                shift
            else
                >&2 echo "ERROR: Filter -g expected parameter M or Z, got: $GENDER_TYPE"
                exit 1
            fi
            ;;
        -s)
            HISTO=true
            WIDTH=$2
            if ! [[ "$WIDTH" =~ [0-9]+ ]]
            then
                WIDTH=0
                shift
            else
                shift
                shift
            fi
            ;;
        *)
            break
            ;;
    esac
done


#gets cmds
case "$1" in
    infected)
        CMD_INFECTED=true
        shift
        ;;
    gender)
        CMD_GENDER=true
        shift
        ;;
    age)
        CMD_AGE=true
        shift
        ;;
    daily)
        CMD_DAILY=true
        shift
        ;;
    monthly)
        CMD_MONTHLY=true
        shift
        ;;
    yearly)
        CMD_YEARLY=true
        shift
        ;;
    countries)
        CMD_COUNTRIES=true
        shift
        ;;
    districts)
        CMD_DISTRICTS=true
        shift
        ;;
    regions)
        CMD_REGIONS=true
        shift
        ;;
    merge)
        CMD_MERGE=true
        shift
        ;;
    *)
        ;;
    esac

# loads merge input
LOAD_STDIN=true
while [ "$#" -gt 0 ]; do
    if [[ "$1" =~ ^.*(.csv)$ ]]
    then
        FILES+=$( cat "$1" | tr -d " \t" )
        LOAD_STDIN=false

    elif [[ "$1" =~ ^.*(.csv.gz)$ ]]
    then
        FILES+=$( gzip -dkc "$1" | tr -d " \t" )
        LOAD_STDIN=false

    elif [[ "$1" =~ ^.*(.csv.bz2)$ ]]
    then
        FILES+=$( bzip2 -dkc "$1" | tr -d " \t" )
        LOAD_STDIN=false

    else
        >&2 echo "ERROR: File not expected: $1"
        exit 1
    fi
    FILES+="\n"
    shift
done
# checks whether lo load from stdin
if $LOAD_STDIN
then
    FILES=$(cat - | tr -d " \t")
fi


# removes all heads
FILES=$( echo "$FILES" | grep -v "$HEAD" )


# validates data
FILES=$( echo "$FILES" | awk 'NF' | awk \
    -F, \
    '{
    if ( ($3 ~ /[^0-9]+/) && ($3 != "")) 
        print "Invalid age: " $0 | "cat 1>&2";

    else if ( $2 != "" && !($2 ~ /((18|19|20)[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((18|19|20)[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))|((18|19|20)[0-9]{2}-(02)-(0[1-9]|1[0-9]|2[0-8]))|((((18|19|20)(04|08|[2468][048]|[13579][26]))|2000)-(02)-29)/) )
        print "Invalid date: " $0 | "cat 1>&2";
    else
        print $0;
    }'
)


# filters the data
if  $AFTER  &&  $BEFORE  &&  $GENDER 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v AFTER="$AFTER_DATE" \
        -v BEFORE="$BEFORE_DATE" \
        -v GENDER_TYPE="$GENDER_TYPE" \
        '$2 >= AFTER && $2 <= BEFORE && $4 == GENDER_TYPE'\
        )


elif  $AFTER  &&  $BEFORE 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v AFTER="$AFTER_DATE" \
        -v BEFORE="$BEFORE_DATE" \
        '$2 >= AFTER && $2 <= BEFORE'\
        )


elif  $AFTER  &&  $GENDER  
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v AFTER="$AFTER_DATE" \
        -v GENDER_TYPE="$GENDER_TYPE" \
        '$2 >= AFTER && $4 == GENDER_TYPE'\
        )



elif  $BEFORE  &&  $GENDER 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v BEFORE="$BEFORE_DATE" \
        -v GENDER_TYPE="$GENDER_TYPE" \
        '$2 <= BEFORE && $4 == GENDER_TYPE'\
        )


elif  $AFTER 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v AFTER="$AFTER_DATE" \
        '$2 >= AFTER'\
        )


elif  $BEFORE 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v BEFORE="$BEFORE_DATE" \
        '$2 <= BEFORE'\
        )


elif  $GENDER 
then
    FILTRED=$( echo "$FILES" | awk \
        -F, \
        -v GENDER_TYPE="$GENDER_TYPE" \
        '$4 == GENDER_TYPE'\
        )


else
    FILTRED="$FILES"
fi

OUTPUT=$( switch_cmd "$FILTRED" )



if $HISTO
then
    if $CMD_GENDER
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=100
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_AGE
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=10000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_DAILY
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=500
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_MONTHLY
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=10000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_YEARLY
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=100000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_COUNTRIES
    then
        if [ $WIDTH == 100 ]
        then
            WIDTH=100000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_DISTRICTS
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=1000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    elif $CMD_REGIONS
    then
        if [ $WIDTH == 0 ]
        then
            WIDTH=10000
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                '{
                    hashes = "";
                    for (i = 1; i <= int($2/width); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        else
            HIGHEST=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v highest=0 \
                '{
                    highest=(highest>$2)?highest:$2
                } END {
                    print highest;
                }'
                )
            OUTPUT=$( echo "$OUTPUT" | awk \
                -F': ' \
                -v width="$WIDTH" \
                -v highest="$HIGHEST" \
                '{
                    hashes = "";
                    for(i = 1; i <= int(width * $2 / highest); i++)
                        hashes = sprintf("%s%s",hashes, "#");
                    if (hashes != "")
                        print $1 ": " hashes;
                    else
                        print $1 ":";
                }'
                )
        fi

    else
        >&2 echo "ERROR: histogram without command not valid"
        exit 1
    fi
fi

echo "$OUTPUT"

exit 0